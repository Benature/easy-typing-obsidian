/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/

'use strict';

var obsidian = require('obsidian');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

const DEFAULT_SETTINGS = {
    mySetting: 'default'
};
class MyPlugin extends obsidian.Plugin {
    constructor() {
        super(...arguments);
        this.handleKeyUp = (editor, event) => {
            console.log(event.key);
            if (this.keySetNotUpdate.has(event.key)) {
                return;
            }
            if (editor.somethingSelected()) {
                return;
            }
            var cursor = editor.getCursor();
            let line_number = cursor.line;
            // let line_string = editor.getLine(line_number)
            let selectSatrt = { ch: 0, line: line_number };
            let selectEnd = { ch: cursor.ch, line: line_number };
            // console.log("cursor.ch: ",cursor.ch);
            editor.setSelection(selectSatrt, selectEnd);
            let selectedText = editor.getSelection();
            // console.log("selectedText: ",selectedText);
            let newStr = this.insert_spacing(selectedText);
            newStr = this.handleInlineElement(newStr, '\$');
            newStr = this.handleInlineElement(newStr, '\`');
            // console.log("new string: ",newStr);
            editor.replaceSelection(newStr);
            var cursorOffset = newStr.length - selectedText.length;
            editor.setCursor({
                line: line_number,
                ch: cursor.ch + cursorOffset
            });
            editor.focus();
        };
        this.insert_str = (str, index, value) => {
            if (index < 0 || index >= str.length)
                return null;
            let s1 = str.substring(0, index);
            let s2 = str.substring(index, str.length);
            return s1 + value + s2;
        };
    }
    onload() {
        return __awaiter(this, void 0, void 0, function* () {
            console.log('loading pluginï¼šEasy Typing');
            yield this.loadSettings();
            this.firstCallFileChange = true;
            this.keySetNotUpdate = new Set(['Control', 'Tab', 'ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight', 'Alt', 'Backspace', 'Escape', 'Delete', 'NumLock']);
            // this.addRibbonIcon('dice', 'Sample Plugin', () => {
            // 	new Notice('This is a notice!');
            // });
            this.addStatusBarItem().setText('Status Bar Text');
            this.addCommand({
                id: 'open-sample-modal',
                name: 'Open Sample Modal',
                // callback: () => {
                // 	console.log('Simple Callback');
                // },
                checkCallback: (checking) => {
                    let leaf = this.app.workspace.activeLeaf;
                    if (leaf) {
                        if (!checking) {
                            new SampleModal(this.app).open();
                        }
                        return true;
                    }
                    return false;
                }
            });
            this.addSettingTab(new SampleSettingTab(this.app, this));
            this.registerCodeMirror((cm) => {
                console.log('codemirror', cm);
            });
            // better
            // this.registerEvent(
            // 	this.app.metadataCache.on("resolved", this.fileChangedCallBack, this)
            // );
            // 'keyup' is better than 'keydown'
            this.registerCodeMirror((codeMirrorEditor) => {
                codeMirrorEditor.on('keyup', this.handleKeyUp);
            });
            // this.registerDomEvent(document, 'click', (evt: MouseEvent) => {
            // 	console.log('click', evt);
            // });
            // this.registerInterval(window.setInterval(() => console.log('setInterval'), 5 * 60 * 1000));
        });
    }
    onunload() {
        console.log('unloading plugin');
    }
    fileChangedCallBack() {
        return __awaiter(this, void 0, void 0, function* () {
            // console.log("call fileChangedCallBack");
            if (this.firstCallFileChange) {
                this.firstCallFileChange = false;
                return;
            }
            let activeLeaf = this.app.workspace.activeLeaf;
            let editor = activeLeaf.view.sourceMode.cmEditor;
            if (editor.somethingSelected()) {
                return;
            }
            var cursor = editor.getCursor();
            let line_number = cursor.line;
            // let line_string = editor.getLine(line_number)
            let selection_start = { ch: 0, line: line_number };
            let selection_end = { ch: cursor.ch, line: line_number };
            // console.log("cursor.ch: ",cursor.ch);
            editor.setSelection(selection_start, selection_end);
            let selectedText = editor.getSelection();
            // console.log("selectedText: ",selectedText);
            let newStr = this.insert_spacing(selectedText);
            editor.replaceSelection(newStr);
            var cursorOffset = newStr.length - selectedText.length;
            editor.setCursor({
                line: line_number,
                ch: cursor.ch + cursorOffset
            });
            editor.focus();
        });
    }
    loadSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
        });
    }
    saveSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.saveData(this.settings);
        });
    }
    handleInlineElement(input, separator) {
        let len = input.length;
        let indexes = [];
        for (let i = 0; i < len; i++) {
            if (input.charAt(i) === separator) {
                indexes.push(i);
            }
        }
        let result = input;
        let offset = 0;
        while (indexes.length > 0) {
            let indexStart = indexes[0];
            if (indexStart != 0 && input.charAt(indexStart - 1).match(/[A-Za-z0-9\u4e00-\u9fa5,.]/i) != null) {
                result = this.insert_str(result, indexStart + offset, ' ');
                offset++;
            }
            indexes.shift();
            if (indexes.length == 0) {
                break;
            }
            let indexEnd = indexes[0];
            if (indexEnd != input.length - 1 && input.charAt(indexEnd + 1).match(/[A-Za-z0-9\u4e00-\u9fa5]/)) {
                result = this.insert_str(result, indexEnd + 1 + offset, ' ');
                offset++;
            }
            indexes.shift();
        }
        return result;
    }
    insert_spacing(str) {
        var p1 = /([A-Za-z0-9,.])([\u4e00-\u9fa5]+)/gi;
        var p2 = /([\u4e00-\u9fa5,]+)([A-Za-z0-9])/gi;
        var p3 = /([\u4e00-\u9fa5]+) ([\u4e00-\u9fa5]+)/gi;
        // var formula1 = /([A-Za-z0-9\u4e00-\u9fa5]+)(\$[^\s]+.*[^\s]+\$)/gi;
        // var formula2 = /(\$[^\s]+.*[^\s]+\$)([A-Za-z0-9\u4e00-\u9fa5]+)/gi;
        return str.replace(p1, "$1 $2").replace(p2, "$1 $2").replace(p3, "$1$2");
    }
}
class SampleModal extends obsidian.Modal {
    constructor(app) {
        super(app);
    }
    onOpen() {
        let { contentEl } = this;
        contentEl.setText('Woah!');
    }
    onClose() {
        let { contentEl } = this;
        contentEl.empty();
    }
}
class SampleSettingTab extends obsidian.PluginSettingTab {
    constructor(app, plugin) {
        super(app, plugin);
        this.plugin = plugin;
    }
    display() {
        let { containerEl } = this;
        containerEl.empty();
        containerEl.createEl('h2', { text: 'Settings for my awesome plugin.' });
        new obsidian.Setting(containerEl)
            .setName('Setting #1')
            .setDesc('It\'s a secret')
            .addText(text => text
            .setPlaceholder('Enter your secret')
            .setValue('')
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            console.log('Secret: ' + value);
            this.plugin.settings.mySetting = value;
            yield this.plugin.saveSettings();
        })));
    }
}

module.exports = MyPlugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
