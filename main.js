/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/

'use strict';

var obsidian = require('obsidian');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

var IsInlineElement;
(function (IsInlineElement) {
    IsInlineElement[IsInlineElement["yes"] = 0] = "yes";
    IsInlineElement[IsInlineElement["no"] = 1] = "no";
})(IsInlineElement || (IsInlineElement = {}));
var InlineMarks;
(function (InlineMarks) {
    InlineMarks["codestart"] = "CodeStart";
    InlineMarks["codeend"] = "CodeEnd";
    InlineMarks["formulastart"] = "FormulaStart";
    InlineMarks["formulaend"] = "FormulaEnd";
    InlineMarks["mdlinkstart"] = "MdLinkStart";
    InlineMarks["mdlinkend"] = "MdLinkEnd";
    InlineMarks["wikilinkstart"] = "WikiLinkBegin";
    InlineMarks["wikilinkend"] = "WikiLinkEnd";
    InlineMarks["httpinkstart"] = "HttpLinkStart";
    InlineMarks["httplinkend"] = "HttpLinkEnd";
    InlineMarks["none"] = "None";
})(InlineMarks || (InlineMarks = {}));
const DEFAULT_SETTINGS = {
    mySetting: 'default',
    autoFormatting: true,
    ChineseEnglishSpace: true,
    ChineseNoSpace: true,
    inlineCodeSpace: true,
    inlineFormulaSpace: true,
    EnglishSpace: true,
    Capitalization: true,
    braceSpace: true,
    numberSpace: true,
    linkspace: true
};
class MyPlugin extends obsidian.Plugin {
    constructor() {
        super(...arguments);
        this.handleKeyDown = (editor, event) => {
            // console.log('=========================')
            // console.log('keydown:', event.key);
            if (event.key === 'Process') {
                this.inputChineseFlag = true;
            }
            if (event.key === 'Control') {
                this.keyCtrlFlag = true;
            }
        };
        this.handleKeyUp = (editor, event) => {
            // console.log('=========================')
            // console.log('keyup:', event.key);
            // for test and debug
            // if(event.key === 'F4')
            // {
            // 	console.log("Test Begin========================");
            // 	console.log(this.settings.autoFormatting)
            // 	console.log("Test End========================");
            // 	return;
            // }
            if (this.settings.autoFormatting === false) {
                return;
            }
            if (event.key === 'Control') {
                this.keyCtrlFlag = false;
                return;
            }
            if (this.keyCtrlFlag && event.key === 'z') {
                // console.log('Find undo, continue!');
                return;
            }
            if (this.keySetNotUpdate.has(event.key)) {
                return;
            }
            if (editor.somethingSelected()) {
                return;
            }
            if (this.inputChineseFlag) {
                // 判断中文输入的结束点，检测到数字或者空格就是输入中文结束，Shift是中文输入法输入英文。
                // 匹配,.;'<>是中文输入法的全角字符，。；‘’《》
                if (event.key.match(/[0-9 ,.;<>:'\\\/]/gi) != null || event.key === 'Shift') {
                    // console.log("chinese input done!");
                    this.inputChineseFlag = false;
                }
                else {
                    return;
                }
            }
            let cursor = editor.getCursor();
            let line = editor.getLine(cursor.line);
            let subLine = line.substring(0, cursor.ch);
            let newSubLine = this.formatLine(subLine, this);
            if (line.substring(0, cursor.ch) != newSubLine) {
                let lineStart = { ch: 0, line: cursor.line };
                editor.replaceRange(newSubLine, lineStart, cursor);
                editor.setCursor({
                    line: cursor.line,
                    ch: newSubLine.length
                });
                editor.focus();
            }
        };
        this.getInlineIndex = (line) => {
            let inlineIndex = [];
            let codeflag = InlineMarks.codestart;
            let formulaflag = InlineMarks.formulastart;
            let prev = InlineMarks.none;
            for (let i = 0; i < line.length; i++) {
                if (line.charAt(i) === '\`') {
                    inlineIndex.push([i, codeflag]);
                    prev = codeflag;
                    codeflag = codeflag === InlineMarks.codestart ? InlineMarks.codeend : InlineMarks.codestart;
                }
                if (line.charAt(i) === '\$') {
                    if (prev === InlineMarks.codestart) {
                        continue;
                    }
                    else {
                        inlineIndex.push([i, formulaflag]);
                        prev = formulaflag;
                        formulaflag = formulaflag === InlineMarks.formulastart ? InlineMarks.formulaend : InlineMarks.formulastart;
                    }
                }
            }
            var regMdLink = /\[[^]*?\]\([^]*?\)/;
            var regWikiLink = /\[\[[^]*?\]\]/;
            let linecopy = line;
            let offset = 0;
            while (linecopy.search(regMdLink) != -1) {
                let begin = linecopy.search(regMdLink);
                let end = begin + linecopy.match(regMdLink)[0].length - 1;
                if (begin != 0 && linecopy.charAt(begin - 1) === '!') {
                    begin -= 1;
                }
                inlineIndex.push([begin + offset, InlineMarks.mdlinkstart]);
                inlineIndex.push([end + offset, InlineMarks.mdlinkend]);
                linecopy = linecopy.substring(end + 1);
                offset += end + 1;
            }
            offset = 0;
            linecopy = line;
            while (linecopy.search(regWikiLink) != -1) {
                let begin = linecopy.search(regWikiLink);
                let end = begin + linecopy.match(regWikiLink)[0].length - 1;
                if (begin != 0 && linecopy.charAt(begin - 1) === '!') {
                    begin -= 1;
                }
                inlineIndex.push([begin + offset, InlineMarks.wikilinkstart]);
                inlineIndex.push([end + offset, InlineMarks.wikilinkend]);
                linecopy = linecopy.substring(end + 1);
                offset += end + 1;
            }
            var regHttpLink = /(?<!\()http(s?):\/\/[0-9a-zA-Z-#\.\/]+/;
            offset = 0;
            linecopy = line;
            while (linecopy.search(regHttpLink) != -1) {
                let begin = linecopy.search(regHttpLink);
                let end = begin + linecopy.match(regHttpLink)[0].length - 1;
                if (begin != 0 && linecopy.charAt(begin - 1) === '!') {
                    begin -= 1;
                }
                inlineIndex.push([begin + offset, InlineMarks.httpinkstart]);
                inlineIndex.push([end + offset, InlineMarks.httplinkend]);
                linecopy = linecopy.substring(end + 1);
                offset += end + 1;
            }
            return inlineIndex.sort((a, b) => a[0] - b[0]);
        };
        this.getSubStrings = (line) => {
            let subStrings = [];
            let indexVec = this.getInlineIndex(line);
            if (indexVec.length === 0) {
                return [[line, IsInlineElement.no]];
            }
            let start = 0;
            let end = 0;
            for (let i = 0; i <= indexVec.length; i++) {
                start = end;
                if (i === indexVec.length) {
                    end = line.length;
                }
                else {
                    end = indexVec[i][0] + i % 2;
                }
                let s = line.substring(start, end);
                let flag = i % 2 === 0 ? IsInlineElement.no : IsInlineElement.yes;
                if (s != '') {
                    subStrings.push([s, flag]);
                }
            }
            return subStrings;
        };
        this.formatLine = (line, plugin) => {
            let linecopy = line;
            if (linecopy === '') {
                return '';
            }
            if (plugin.settings.Capitalization) {
                var regHttpLink = /\s*http(s?):\/\/[0-9a-zA-Z-#\.\/]+/;
                if (linecopy.search(regHttpLink) === 0) ;
                else if (linecopy.search(/\s*[a-z]/) === 0) {
                    let match = linecopy.match(/\s*[a-z]/)[0];
                    linecopy = match.toUpperCase() + linecopy.substring(match.length);
                }
            }
            linecopy = plugin.processInlineElements(linecopy);
            let subStrings = plugin.getSubStrings(linecopy);
            let output = '';
            subStrings.forEach(function (item) {
                let tempString = item[0];
                if (item[1] === IsInlineElement.no) {
                    if (plugin.settings.ChineseEnglishSpace) {
                        var reg1 = /([A-Za-z0-9,.;?:!])([\u4e00-\u9fa5]+)/gi;
                        var reg2 = /([\u4e00-\u9fa5]+)([A-Za-z0-9])/gi;
                        tempString = tempString.replace(reg1, "$1 $2").replace(reg2, "$1 $2");
                    }
                    if (plugin.settings.ChineseNoSpace) {
                        var reg = /([\u4e00-\u9fa5，。、；‘’《》]+)(\s+)([\u4e00-\u9fa5，。、；‘’《》]+)/g;
                        while (tempString.match(reg) != null) {
                            tempString = tempString.replace(reg, "$1$3");
                        }
                    }
                    if (plugin.settings.EnglishSpace) {
                        var reg1 = /([,.;?:!])([A-Za-z])/gi;
                        // var reg2 = /([A-Za-z0-9])(\()/gi;
                        tempString = tempString.replace(reg1, "$1 $2");
                    }
                    if (plugin.settings.Capitalization) {
                        var reg = /[.;?!。！；？]([\s]*)[a-z]/;
                        let find = tempString.search(reg);
                        tempString.length;
                        while (find != -1) {
                            let matchstring = tempString.match(reg)[0];
                            find += matchstring.length - 1;
                            tempString = tempString.substring(0, find) + tempString.charAt(find).toUpperCase() + tempString.substring(find + 1);
                            find = tempString.search(reg);
                        }
                        let pos = -1;
                        // 支持ul列表
                        if (tempString.search(/\s*- [a-z]/) === 0) {
                            pos = tempString.match(/\s*\- [a-z]/)[0].length - 1;
                            // console.log("string:", tempString.match(/\s*- [a-z]/)[0],",len:",pos+1);
                        }
                        // 支持有序列表
                        else if (tempString.search(/\s*[0-9]+. [a-z]/) === 0) {
                            pos = tempString.match(/\s*[0-9]+. [a-z]/)[0].length - 1;
                        }
                        // 支持checkbox
                        else if (tempString.search(/\s*\- \[[ x]\] [a-z]/) === 0) {
                            pos = tempString.match(/\s*\- \[[ x]\] [a-z]/)[0].length - 1;
                        }
                        if (pos != -1) {
                            tempString = tempString.substring(0, pos) + tempString.charAt(pos).toUpperCase() + tempString.substring(pos + 1);
                        }
                    }
                    if (plugin.settings.braceSpace) {
                        var reg1 = /(\))([A-Za-z0-9\u4e00-\u9fa5]+)/gi;
                        var reg2 = /([A-Za-z0-9\u4e00-\u9fa5:,.?']+)(\()/gi;
                        tempString = tempString.replace(reg1, "$1 $2").replace(reg2, "$1 $2");
                    }
                    if (plugin.settings.numberSpace) {
                        var reg1 = /([A-Za-z,;?:!\]\}])([0-9])/gi;
                        var reg2 = /([0-9])([A-Za-z,;?:!\[\{])/gi;
                        tempString = tempString.replace(reg1, "$1 $2").replace(reg2, "$1 $2");
                    }
                }
                output += tempString;
            });
            return output;
        };
        this.insert_str = (str, index, value) => {
            if (index < 0 || index >= str.length)
                return null;
            let s1 = str.substring(0, index);
            let s2 = str.substring(index, str.length);
            return s1 + value + s2;
        };
    }
    onload() {
        return __awaiter(this, void 0, void 0, function* () {
            console.log('loading plugin：Easy Typing');
            yield this.loadSettings();
            this.firstCallFileChange = true;
            this.keyCtrlFlag = false;
            this.inputChineseFlag = false;
            this.keySetNotUpdate = new Set(['Control', 'Tab', 'ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight', 'Alt', 'Backspace', 'Escape', 'Delete', 'NumLock']);
            this.addCommand({
                id: "easy-typing-format-line",
                name: "format current line",
                callback: () => this.commandFormatLine(),
                hotkeys: [{
                        modifiers: ['Ctrl'],
                        key: "tab"
                    }],
            });
            // this.addCommand({
            // 	id: "easy-typing-format-note",
            // 	name: "format current note",
            // 	callback: () => this.commandFormatNote(),
            // 	hotkeys: [{
            // 		modifiers: ['Alt'],
            // 		key: "f"
            // 	}],
            // });		
            this.addSettingTab(new SampleSettingTab(this.app, this));
            this.registerCodeMirror((codeMirrorEditor) => {
                codeMirrorEditor.on('keyup', this.handleKeyUp);
            });
            this.registerCodeMirror((codeMirrorEditor) => {
                codeMirrorEditor.on('keydown', this.handleKeyDown);
            });
            // this.registerDomEvent(document, 'click', (evt: MouseEvent) => {
            // 	console.log('click', evt);
            // });
            // this.registerInterval(window.setInterval(() => console.log('setInterval'), 5 * 60 * 1000));
        });
    }
    onunload() {
        console.log('unloading plugin');
    }
    commandFormatNote() {
        let activeLeaf = this.app.workspace.activeLeaf;
        let editor = activeLeaf.view.sourceMode.cmEditor;
        editor.lineCount();
    }
    commandFormatLine() {
        let activeLeaf = this.app.workspace.activeLeaf;
        let editor = activeLeaf.view.sourceMode.cmEditor;
        let cursor = editor.getCursor();
        let line = editor.getLine(cursor.line);
        let newline = this.formatLine(line, this);
        if (newline != editor.getLine(cursor.line)) {
            let lineStart = { ch: 0, line: cursor.line };
            let lineEnd = { ch: line.length, line: cursor.line };
            editor.replaceRange(newline, lineStart, lineEnd);
        }
    }
    loadSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
        });
    }
    saveSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.saveData(this.settings);
        });
    }
    processInlineElements(input) {
        let indexes = this.getInlineIndex(input);
        let output = input;
        let offset = 0;
        for (let i = 0; i < indexes.length; i++) {
            let index = indexes[i][0];
            let flag = indexes[i][1];
            if (this.settings.inlineCodeSpace) {
                if (flag === InlineMarks.codestart) {
                    if (index != 0 && input.charAt(index - 1).match(/[A-Za-z0-9\u4e00-\u9fa5,.:?'\)\}\]\>\\\|\/]/i) != null) {
                        output = this.insert_str(output, index + offset, ' ');
                        offset++;
                    }
                    continue;
                }
                if (flag === InlineMarks.codeend) {
                    if (index != input.length - 1 && input.charAt(index + 1).match(/[A-Za-z0-9\u4e00-\u9fa5\(\{\[\<\\\|\/]/) != null) {
                        output = this.insert_str(output, index + 1 + offset, ' ');
                        offset++;
                    }
                    continue;
                }
            }
            if (this.settings.inlineFormulaSpace) {
                if (flag === InlineMarks.formulastart) {
                    if (index != 0 && input.charAt(index - 1).match(/[A-Za-z0-9\u4e00-\u9fa5,.:]/i) != null) {
                        output = this.insert_str(output, index + offset, ' ');
                        offset++;
                    }
                    continue;
                }
                if (flag === InlineMarks.formulaend) {
                    if (index != input.length - 1 && input.charAt(index + 1).match(/[A-Za-z0-9\u4e00-\u9fa5]/) != null) {
                        output = this.insert_str(output, index + 1 + offset, ' ');
                        offset++;
                    }
                    continue;
                }
            }
        }
        return output;
    }
}
class SampleSettingTab extends obsidian.PluginSettingTab {
    constructor(app, plugin) {
        super(app, plugin);
        this.plugin = plugin;
    }
    display() {
        let { containerEl } = this;
        containerEl.empty();
        // containerEl.createEl('h2', {text: 'Settings for Easy Typing.'});
        containerEl.createEl('h2', { text: '总开关 (Master Switch)' });
        new obsidian.Setting(containerEl)
            .setName("Auto formatting")
            .setDesc("是否在编辑文档时自动格式化文本")
            .addToggle((toggle) => {
            toggle.setValue(this.plugin.settings.autoFormatting)
                .onChange((value) => __awaiter(this, void 0, void 0, function* () {
                this.plugin.settings.autoFormatting = value;
                console.log("AutoFormatting:", value);
                yield this.plugin.saveSettings();
            }));
        });
        containerEl.createEl('h2', { text: '详细规则开关 (Sub Switch)' });
        new obsidian.Setting(containerEl)
            .setName("Space between Chinese and English/number")
            .setDesc("在中文和英文/数字间空格")
            .addToggle((toggle) => {
            toggle.setValue(this.plugin.settings.ChineseEnglishSpace).onChange((value) => __awaiter(this, void 0, void 0, function* () {
                this.plugin.settings.ChineseEnglishSpace = value;
                yield this.plugin.saveSettings();
            }));
        });
        new obsidian.Setting(containerEl)
            .setName("Delete the Space between Chinese characters")
            .setDesc("在中文字符间去除空格")
            .addToggle((toggle) => {
            toggle.setValue(this.plugin.settings.ChineseNoSpace).onChange((value) => __awaiter(this, void 0, void 0, function* () {
                this.plugin.settings.ChineseNoSpace = value;
                yield this.plugin.saveSettings();
            }));
        });
        new obsidian.Setting(containerEl)
            .setName("Space between English with punctuate")
            .setDesc("在英文文本和标点间空格")
            .addToggle((toggle) => {
            toggle.setValue(this.plugin.settings.EnglishSpace).onChange((value) => __awaiter(this, void 0, void 0, function* () {
                this.plugin.settings.EnglishSpace = value;
                yield this.plugin.saveSettings();
            }));
        });
        new obsidian.Setting(containerEl)
            .setName("Capitalize the first letter of every sentence")
            .setDesc("英文每个句首字母大写")
            .addToggle((toggle) => {
            toggle.setValue(this.plugin.settings.Capitalization).onChange((value) => __awaiter(this, void 0, void 0, function* () {
                this.plugin.settings.Capitalization = value;
                yield this.plugin.saveSettings();
            }));
        });
        new obsidian.Setting(containerEl)
            .setName("Space between number and English text")
            .setDesc("数字和英文文本及标点间空格")
            .addToggle((toggle) => {
            toggle.setValue(this.plugin.settings.numberSpace).onChange((value) => __awaiter(this, void 0, void 0, function* () {
                this.plugin.settings.numberSpace = value;
                yield this.plugin.saveSettings();
            }));
        });
        new obsidian.Setting(containerEl)
            .setName("Space between English braces and text")
            .setDesc("在英文小括号和文本间空格")
            .addToggle((toggle) => {
            toggle.setValue(this.plugin.settings.braceSpace).onChange((value) => __awaiter(this, void 0, void 0, function* () {
                this.plugin.settings.braceSpace = value;
                yield this.plugin.saveSettings();
            }));
        });
        new obsidian.Setting(containerEl)
            .setName("Space between inline code and text")
            .setDesc("在行内代码和文本间空格")
            .addToggle((toggle) => {
            toggle.setValue(this.plugin.settings.inlineCodeSpace).onChange((value) => __awaiter(this, void 0, void 0, function* () {
                this.plugin.settings.inlineCodeSpace = value;
                yield this.plugin.saveSettings();
            }));
        });
        new obsidian.Setting(containerEl)
            .setName("Space between inline formula and text")
            .setDesc("在行内公式和文本间空格")
            .addToggle((toggle) => {
            toggle.setValue(this.plugin.settings.inlineFormulaSpace).onChange((value) => __awaiter(this, void 0, void 0, function* () {
                this.plugin.settings.inlineFormulaSpace = value;
                yield this.plugin.saveSettings();
            }));
        });
    }
}

module.exports = MyPlugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
