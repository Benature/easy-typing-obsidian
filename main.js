/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/

'use strict';

var obsidian = require('obsidian');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

var InlineFlag;
(function (InlineFlag) {
    InlineFlag[InlineFlag["inline"] = 0] = "inline";
    InlineFlag[InlineFlag["notinline"] = 1] = "notinline";
})(InlineFlag || (InlineFlag = {}));
const DEFAULT_SETTINGS = {
    mySetting: 'default'
};
class MyPlugin extends obsidian.Plugin {
    constructor() {
        super(...arguments);
        this.handleKeyDown = (editor, event) => {
            console.log('=========================');
            console.log('keydown:', event.key);
            if (event.key === 'Process') {
                this.inputChineseFlag = true;
            }
            if (event.key === 'Control') {
                this.keyCtrlFlag = true;
            }
        };
        this.handleKeyUp = (editor, event) => {
            console.log('=========================');
            console.log('keyup:', event.key);
            // for test and debug
            if (event.key === 'F4') {
                console.log("Test Begin========================");
                console.log("Test End========================");
                return;
            }
            if (event.key === 'Control') {
                this.keyCtrlFlag = false;
                return;
            }
            if (this.keyCtrlFlag && event.key === 'z') {
                // console.log('Find undo, continue!');
                return;
            }
            if (this.keySetNotUpdate.has(event.key)) {
                return;
            }
            if (editor.somethingSelected()) {
                return;
            }
            if (this.inputChineseFlag) {
                // 判断中文输入的结束点，检测到数字或者空格就是输入中文结束，Shift是中文输入法输入英文。
                // 匹配,.;'<>是中文输入法的全角字符，。；‘’《》
                if (event.key.match(/[0-9 ,.;<>:'\\\/]/gi) != null || event.key === 'Shift') {
                    // console.log("chinese input done!");
                    this.inputChineseFlag = false;
                }
                else {
                    return;
                }
            }
            let cursor = editor.getCursor();
            let line = editor.getLine(cursor.line);
            console.log(line);
            let ret = this.formatLine(line, cursor.ch, this);
            console.log(ret);
            if (ret[0]) {
                let lineStart = { ch: 0, line: cursor.line };
                editor.replaceRange(ret[1].substring(0, ret[2]), lineStart, cursor);
                editor.setCursor({
                    line: cursor.line,
                    ch: ret[2]
                });
                editor.focus();
            }
        };
        this.getInlineIndexes = (line) => {
            let inlineIndexes = [];
            let codeFlags = ['codeStart', 'codeEnd'];
            let formulaFlags = ['formulaStart', 'formulaEnd'];
            let codeIndex = 0;
            let formulaIndex = 0;
            for (let i = 0; i < line.length; i++) {
                if (line.charAt(i) === '\`') {
                    inlineIndexes.push([i, codeFlags[codeIndex]]);
                    codeIndex = 1 - codeIndex;
                }
                if (line.charAt(i) === '\$') {
                    if (inlineIndexes[inlineIndexes.length - 1][1] === codeFlags[0]) {
                        continue;
                    }
                    else {
                        inlineIndexes.push([i, formulaFlags[formulaIndex]]);
                        formulaIndex = 1 - formulaIndex;
                    }
                }
            }
            return inlineIndexes;
        };
        this.getSubStrings = (line) => {
            let subStrings = [];
            let indexVec = this.getInlineIndexes(line);
            if (indexVec.length === 0) {
                return [[line, InlineFlag.notinline]];
            }
            let start = 0;
            let end = 0;
            for (let i = 0; i <= indexVec.length; i++) {
                start = end;
                if (i === indexVec.length) {
                    end = line.length;
                }
                else {
                    end = indexVec[i][0] + i % 2;
                }
                let s = line.substring(start, end);
                let flag = i % 2 === 0 ? InlineFlag.notinline : InlineFlag.inline;
                if (s != '') {
                    subStrings.push([s, flag]);
                }
            }
            return subStrings;
        };
        this.formatLine = (line, ch, plugin) => {
            let update = false;
            if (line === '' || ch === 0) {
                return [false, '', 0];
            }
            let subline = line.substring(0, ch);
            if (plugin.Capitalization) {
                if (subline.charAt(0).match(/[a-z]/) != null) {
                    subline = subline.substring(0, 1).toUpperCase() + subline.substring(1);
                }
            }
            let inlineIndexes = plugin.getInlineIndexes(subline);
            subline = plugin.processInlineElements(subline, inlineIndexes);
            let subStrings = plugin.getSubStrings(subline);
            let output = '';
            subStrings.forEach(function (item) {
                let tempString = item[0];
                if (item[1] === InlineFlag.notinline) {
                    if (plugin.ChineseEnglishSpace) {
                        var reg1 = /([A-Za-z0-9,.;?:])([\u4e00-\u9fa5]+)/gi;
                        var reg2 = /([\u4e00-\u9fa5]+)([A-Za-z0-9])/gi;
                        tempString = tempString.replace(reg1, "$1 $2").replace(reg2, "$1 $2");
                    }
                    if (plugin.ChineseNoSpace) {
                        var reg = /([\u4e00-\u9fa5，。、；‘’《》]+)(\s+)([\u4e00-\u9fa5，。、；‘’《》]+)/g;
                        while (tempString.match(reg) != null) {
                            tempString = tempString.replace(reg, "$1$3");
                        }
                    }
                    if (plugin.EnglishSpace) {
                        var reg = /([,.;?:])([A-Za-z0-9])/gi;
                        tempString = tempString.replace(reg, "$1 $2");
                    }
                    if (plugin.Capitalization) {
                        var reg = /[.;?。；？]([\s]*)[a-z]/;
                        let find = tempString.search(reg);
                        let len = tempString.length;
                        while (find != -1) {
                            let matchstring = tempString.match(reg)[0];
                            find += matchstring.length - 1;
                            if (find + 1 < len) {
                                tempString = tempString.substring(0, find) + tempString.charAt(find).toUpperCase() + tempString.substring(find + 1);
                            }
                            else {
                                tempString = tempString.substring(0, find) + tempString.charAt(find).toUpperCase();
                            }
                            find = tempString.search(reg);
                        }
                    }
                }
                output += tempString;
            });
            let len = output.length;
            output += line.substring(ch, line.length);
            if (output != line) {
                update = true;
            }
            return [update, output, len];
        };
        this.insert_str = (str, index, value) => {
            if (index < 0 || index >= str.length)
                return null;
            let s1 = str.substring(0, index);
            let s2 = str.substring(index, str.length);
            return s1 + value + s2;
        };
    }
    onload() {
        return __awaiter(this, void 0, void 0, function* () {
            console.log('loading plugin：Easy Typing');
            yield this.loadSettings();
            this.ChineseEnglishSpace = true;
            this.ChineseNoSpace = true;
            this.inlineCodeSpace = true;
            this.inlineFormulaSpace = true;
            this.EnglishSpace = true;
            this.Capitalization = true;
            this.firstCallFileChange = true;
            this.keyCtrlFlag = false;
            this.inputChineseFlag = false;
            this.keySetNotUpdate = new Set(['Control', 'Tab', 'ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight', 'Alt', 'Backspace', 'Escape', 'Delete', 'NumLock']);
            // this.addRibbonIcon('dice', 'Sample Plugin', () => {
            // 	new Notice('This is a notice!');
            // });
            this.addStatusBarItem().setText('Status Bar Text');
            this.addCommand({
                id: 'open-sample-modal',
                name: 'Open Sample Modal',
                // callback: () => {
                // 	console.log('Simple Callback');
                // },
                checkCallback: (checking) => {
                    let leaf = this.app.workspace.activeLeaf;
                    if (leaf) {
                        if (!checking) {
                            new SampleModal(this.app).open();
                        }
                        return true;
                    }
                    return false;
                }
            });
            this.addSettingTab(new SampleSettingTab(this.app, this));
            // 'keyup' is better than 'keydown'
            this.registerCodeMirror((codeMirrorEditor) => {
                codeMirrorEditor.on('keyup', this.handleKeyUp);
            });
            this.registerCodeMirror((codeMirrorEditor) => {
                codeMirrorEditor.on('keydown', this.handleKeyDown);
            });
            // this.registerDomEvent(document, 'click', (evt: MouseEvent) => {
            // 	console.log('click', evt);
            // });
            // this.registerInterval(window.setInterval(() => console.log('setInterval'), 5 * 60 * 1000));
        });
    }
    onunload() {
        console.log('unloading plugin');
    }
    loadSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
        });
    }
    saveSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.saveData(this.settings);
        });
    }
    processInlineElements(input, indexes) {
        let codeFlags = ['codeStart', 'codeEnd'];
        let formulaFlags = ['formulaStart', 'formulaEnd'];
        let output = input;
        let offset = 0;
        for (let i = 0; i < indexes.length; i++) {
            let index = indexes[i][0];
            let flag = indexes[i][1];
            if (this.inlineCodeSpace) {
                if (flag === codeFlags[0] && index != 0) {
                    if (input.charAt(index - 1).match(/[A-Za-z0-9\u4e00-\u9fa5,.:]/i) != null) {
                        output = this.insert_str(output, index + offset, ' ');
                        offset++;
                    }
                    continue;
                }
                if (flag === codeFlags[1] && index != input.length - 1) {
                    if (input.charAt(index + 1).match(/[A-Za-z0-9\u4e00-\u9fa5]/) != null) {
                        output = this.insert_str(output, index + 1 + offset, ' ');
                        offset++;
                    }
                    continue;
                }
            }
            if (this.inlineFormulaSpace) {
                if (flag === formulaFlags[0] && index != 0) {
                    if (input.charAt(index - 1).match(/[A-Za-z0-9\u4e00-\u9fa5,.:]/i) != null) {
                        output = this.insert_str(output, index + offset, ' ');
                        offset++;
                    }
                    continue;
                }
                if (flag === formulaFlags[1] && index != input.length - 1) {
                    if (input.charAt(index + 1).match(/[A-Za-z0-9\u4e00-\u9fa5]/) != null) {
                        output = this.insert_str(output, index + 1 + offset, ' ');
                        offset++;
                    }
                    continue;
                }
            }
        }
        return output;
    }
}
class SampleModal extends obsidian.Modal {
    constructor(app) {
        super(app);
    }
    onOpen() {
        let { contentEl } = this;
        contentEl.setText('Woah!');
    }
    onClose() {
        let { contentEl } = this;
        contentEl.empty();
    }
}
class SampleSettingTab extends obsidian.PluginSettingTab {
    constructor(app, plugin) {
        super(app, plugin);
        this.plugin = plugin;
    }
    display() {
        let { containerEl } = this;
        containerEl.empty();
        containerEl.createEl('h2', { text: 'Settings for my awesome plugin.' });
        new obsidian.Setting(containerEl)
            .setName('Setting #1')
            .setDesc('It\'s a secret')
            .addText(text => text
            .setPlaceholder('Enter your secret')
            .setValue('')
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            console.log('Secret: ' + value);
            this.plugin.settings.mySetting = value;
            yield this.plugin.saveSettings();
        })));
    }
}

module.exports = MyPlugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
